<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from model.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!-- Copyright (c) 2017, United States Government, as represented by the     -->
<!-- Administrator of the National Aeronautics and Space Administration.     -->
<!--                                                                         -->
<!-- All rights reserved.                                                    -->
<!--                                                                         -->
<!-- The Astrobee platform is licensed under the Apache License, Version 2.0 -->
<!-- (the "License"); you may not use this file except in compliance with    -->
<!-- the License. You may obtain a copy of the License at                    -->
<!--                                                                         -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                          -->
<!--                                                                         -->
<!-- Unless required by applicable law or agreed to in writing, software     -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,       -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         -->
<!-- implied. See the License for the specific language governing            -->
<!-- permissions and limitations under the License.                          -->
<robot name="astrobee">
  <!--<xacro:if value="${prefix == '/'}">
    <xacro:property name="prefix" value=""/>
  </xacro:if> -->
  <!-- BASE GEOMETRY -->
  <link name="body">
    <self_collide>false</self_collide>
    <!-- body -->
    <visual name="body_visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/body.dae"/>
      </geometry>
    </visual>
    <collision name="body_collision">
      <origin rpy="0 0 0" xyz="-0.000794 0.000229 -0.003907"/>
      <geometry>
        <box size="0.290513 0.151942 0.281129"/>
      </geometry>
    </collision>
    <!-- port pmc -->
    <visual name="pmc_port_visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc.dae"/>
      </geometry>
    </visual>
    <visual name="pmc_port_bumper_visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc_bumper.dae"/>
      </geometry>
    </visual>
    <visual name="pmc_port_skin_visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc_skin.dae"/>
      </geometry>
    </visual>
    <collision name="pmc_port_collision">
      <origin rpy="0 0 0" xyz="0 -0.117546 0"/>
      <geometry>
        <box size="0.319199 0.083962 0.319588"/>
      </geometry>
    </collision>
    <!-- starboard pmc -->
    <visual name="pmc_stbd_visual">
      <origin rpy="0 3.14 3.14" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc.dae"/>
      </geometry>
    </visual>
    <visual name="pmc_stbd_bumper_visual">
      <origin rpy="0 3.14 3.14" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc_bumper.dae"/>
      </geometry>
    </visual>
    <visual name="pmc_stbd_skin_visual">
      <origin rpy="0 3.14 3.14" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://astrobee_freeflyer/meshes/pmc_skin.dae"/>
      </geometry>
    </visual>
    <collision name="pmc_stbd_collision">
      <origin rpy="0 0 0" xyz="0 0.117546 0"/>
      <geometry>
        <box size="0.319199 0.083962 0.319588"/>
      </geometry>
    </collision>
  </link>
  <!-- This is a workaround for KDL -->
  <link name="inertial_link">
    <self_collide>false</self_collide>
    <inertial>
      <mass value="9.0877"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.1454" ixy="0.0" ixz="0.0" iyy="0.1366" iyz="0.0" izz="0.1594"/>
    </inertial>
  </link>
  <joint name="inertial_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="body"/>
    <child link="inertial_link"/>
  </joint>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_drag.so" name="drag_ros">
      &gt;
      
      <namespace>//</namespace>
      <coefficient>1.05</coefficient>
      <!-- Drag coefficient -->
      <area>0.092903</area>
      <!-- Surface area     -->
      <density>1.225</density>
      <!-- Air density      -->
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_pmc.so" name="pmc_ros">
      <namespace>//</namespace>
      <rate>62.5</rate>
      <bypass_blower_model>false</bypass_blower_model>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_eps.so" name="eps_ros">
      &gt;
      
      <namespace>//</namespace>
      <rate>10.0</rate>
      <!-- Rate at which dock state checked  -->
      <distance_near>0.04</distance_near>
      <!-- Threshold distance for magnetism  -->
      <distance_far>0.05</distance_far>
      <!-- Threshold distance for magnetism  -->
      <delay>5.0</delay>
      <!-- Delay between contact and docking -->
      <battery_top_left>true</battery_top_left>
      <battery_top_right>true</battery_top_right>
      <battery_bottom_left>false</battery_bottom_left>
      <battery_bottom_right>false</battery_bottom_right>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_truth.so" name="truth_ros">
      <namespace>//</namespace>
      <rate>62.5</rate>
      <parent>world</parent>
      <child>truth</child>
      <tf>true</tf>
      <pose>true</pose>
      <twist>true</twist>
      <static>false</static>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_laser.so" name="laser_ros">
      <namespace>//</namespace>
      <rate>10.0</rate>
      <range>5.0</range>
      <width>0.0025</width>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_flashlight.so" name="flashlight_front_ros">
      <namespace>//</namespace>
      <plugin_name>flashlight_front</plugin_name>
      <plugin_frame>flashlight_front</plugin_frame>
      <rate>10.0</rate>
      <width>0.02</width>
      <height>0.02</height>
      <depth>0.03</depth>
    </plugin>
    <plugin filename="libgazebo_model_plugin_flashlight.so" name="flashlight_aft_ros">
      <namespace>//</namespace>
      <plugin_name>flashlight_aft</plugin_name>
      <plugin_frame>flashlight_aft</plugin_frame>
      <rate>10.0</rate>
      <width>0.02</width>
      <height>0.02</height>
      <depth>0.03</depth>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_speed_cam.so" name="speed_cam_ros">
      <namespace>//</namespace>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_signal_lights.so" name="signal_lights_ros">
      <namespace>//</namespace>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_model_plugin_llp_disk_monitor.so" name="llp_disk_monitor">
      <namespace>//</namespace>
    </plugin>
    <plugin filename="libgazebo_model_plugin_llp_cpu_mem_monitor.so" name="llp_cpu_mem_monitor">
      <namespace>//</namespace>
    </plugin>
    <plugin filename="libgazebo_model_plugin_mlp_disk_monitor.so" name="mlp_disk_monitor">
      <namespace>//</namespace>
    </plugin>
    <plugin filename="libgazebo_model_plugin_mlp_cpu_mem_monitor.so" name="mlp_cpu_mem_monitor">
      <namespace>//</namespace>
    </plugin>
  </gazebo>
  <!-- SENSORS 
  <xacro:include filename="$(find description)/urdf/sensor_imu.urdf.xacro" />
  <xacro:include filename="$(find description)/urdf/sensor_nav_cam.urdf.xacro" />
  <xacro:include filename="$(find description)/urdf/sensor_dock_cam.urdf.xacro" />
  <xacro:include filename="$(find description)/urdf/sensor_haz_cam.urdf.xacro" />
  <xacro:include filename="$(find description)/urdf/sensor_perch_cam.urdf.xacro" />
  -->
  <!-- PERCHING ARM 
  <xacro:include filename="$(find description)/urdf/macro_perching_arm.urdf.xacro" />
  <xacro:if value="${pay_top_aft == 'perching_arm'}">
    <xacro:perching_arm bay="top_aft"
                        xyz="-0.01 0.0 -0.065"
                        rpy="0.0 3.1415 0.0" />
  </xacro:if>
  <xacro:if value="${pay_bot_aft == 'perching_arm'}">
    <xacro:perching_arm bay="bot_aft"
                        xyz="-0.01 0.0 -0.065"
                        rpy="0.0 3.1415 0.0" />
  </xacro:if>
  <xacro:if value="${pay_bot_front == 'perching_arm'}">
    <xacro:perching_arm bay="bot_aft"
                        xyz="-0.01 0.0 -0.065"
                        rpy="0.0 3.1415 0.0" />
  </xacro:if>
  -->
  <!-- GRANITE-SPECIFIC OPTIONS 
  <xacro:if value="${world == 'granite'}">
    <xacro:include filename="$(find description)/urdf/model_carriage.urdf.xacro" />
  </xacro:if>
  -->
</robot>

